name: Build and deploy to our application to Google Container Registry as a container. Provision and then tear down infra.

on: workflow_dispatch

env:
  PROJECT_ID: ${{ secrets.GCE_PROJECT }}
  GCE_INSTANCE: earthquakinator
  GCE_INSTANCE_ZONE: us-east4-c
  PORT: 80
  DD_API_KEY: ${{ secrets.DD_API_KEY }}
  IP_ADDRESS: 35.212.46.145
  TERRAFORM_WORKING_DIR: ./terraform

jobs:
  setup_build_publish_deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        service_account_key: ${{ secrets.GCE_SA_KEY }}
        project_id: ${{ secrets.GCE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Build the Docker image
    - name: Build Docker Image
      run: |-
        docker build --tag "gcr.io/$PROJECT_ID/$GCE_INSTANCE-image:$GITHUB_SHA" .

    # Push the Docker image to Google Container Registry
    - name: Publish Docker Image To Google Container Registry
      run: |-
        docker push "gcr.io/$PROJECT_ID/$GCE_INSTANCE-image:$GITHUB_SHA"

  provision_infra:
    name: Provision Infra
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}

    steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: Terraform Plan
      run: terraform plan
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: Terraform Apply
      run: terraform apply -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    # - name: Sleep for 5 minutes.
    #   uses: jakejarvis/wait-action@a5360caf7f960b5e84dae7b70dfab7e3e420dc4a
    #   with:
    #     time: '300s'
    #
    # - name: Terraform Destroy
    #   run: terraform destroy -auto-approve
    #   env:
    #     GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    # # Delete the existing version of this instance.
    # # This isn't optimal as it does introduce some down time.
    # # TODO: Use a rolling restart on a managed instance group to more gracefully handle deploys.
    # - name: Delete Existing Infra
    #   run: |-
    #     gcloud compute instances delete earthquakinator \
    #     --zone=us-east4-c \
    #     --quiet
    #
    # # Create a new instance to host our app.
    # - name: Create New Infra
    #   run: |-
    #     gcloud compute instances create-with-container earthquakinator \
    #     --zone "$GCE_INSTANCE_ZONE" \
    #     --machine-type=f1-micro \
    #     --subnet=default \
    #     --network-tier=STANDARD \
    #     --tags=http-server,https-server \
    #     --image=cos-69-10895-385-0 \
    #     --image-project=cos-cloud \
    #     --boot-disk-size=10GB \
    #     --boot-disk-type=pd-standard \
    #     --boot-disk-device-name=earthquakinator \
    #     --container-image "gcr.io/$PROJECT_ID/$GCE_INSTANCE-image:$GITHUB_SHA" \
    #     --container-env "PORT=$PORT" \
    #     --address $IP_ADDRESS \
    #     --quiet
    #
    # # Install the datadog agent on our newly created VM.
    # - name: Install Datadog Agent
    #   run: |-
    #     gcloud compute ssh "$GCE_INSTANCE" \
    #     --zone "$GCE_INSTANCE_ZONE" \
    #     --quiet \
    #     --ssh-key-expire-after=3m \
    #     --command "DOCKER_CONTENT_TRUST=1 docker run -d --name dd-agent -v /var/run/docker.sock:/var/run/docker.sock:ro -v /proc/:/host/proc/:ro -v /sys/fs/cgroup/:/host/sys/fs/cgroup:ro -e DD_API_KEY=$DD_API_KEY datadog/agent:7"
